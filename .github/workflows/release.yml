name: "Release"

on:
  workflow_dispatch:
    inputs:
      dry-run:
        type: boolean
        description: Dry run
        default: false
      with-docker-images:
        type: boolean
        description: Build and push Docker images
        default: true
      with-artifacts:
        type: boolean
        description: Build and push release artifacts
        default: true

env:
  DOCKERHUB_SLUG: jorenn92/maintainerr
  GHCR_SLUG: ghcr.io/jorenn92/maintainerr

jobs:
  semantic-release-dry:
    name: Generate version
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: false

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Activate corepack
        run: |
          corepack install
          corepack enable

      - name: Install dependencies
        run: yarn --immutable

      - name: Release
        id: release-version
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}
        run: |
          npx semantic-release --dry-run --repository-url "$(git config --get remote.origin.url)"

      - name: Validate release number
        if: ${{ steps.release-version.outputs.version == '' && github.event.inputs.dry-run == 'false' }}
        run: |
          exit 1

    outputs:
      version: ${{ steps.release-version.outputs.version }}

  build-docker-image:
    if: github.event.inputs.with-docker-images == 'true'
    name: Build ${{ matrix.platform }}
    needs: semantic-release-dry
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            platform: linux/amd64
          - os: ubuntu-24.04-arm
            platform: linux/arm64
    runs-on: ${{ matrix.os }}
    steps:
      - name: Prepare
        run: |
          platform=${{ matrix.platform }}
          echo "PLATFORM_PAIR=${platform//\//-}" >> $GITHUB_ENV

      - name: Check out the repo
        uses: actions/checkout@v4

      - name: Pull latest changes
        run: git pull

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.DOCKERHUB_SLUG }}
            ${{ env.GHCR_SLUG }}

      - name: Log in to GitHub Container registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME  }}
          password: ${{ secrets.DOCKERHUB_TOKEN  }}

      - name: Build & push by digest
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: ${{ matrix.platform }}
          build-args: |
            GIT_SHA=${{ github.sha }}
            VERSION_TAG=stable
          labels: ${{ steps.meta.outputs.labels }}
          outputs: type=image,"name=${{ env.DOCKERHUB_SLUG }},${{ env.GHCR_SLUG }}",push-by-digest=true,name-canonical=true,push=${{ github.event.inputs.dry-run == 'false' && 'true' || 'false' }}

      - name: Export digest
        if: github.event.inputs.dry-run == 'false'
        run: |
          mkdir -p ${{ runner.temp }}/digests
          digest="${{ steps.build.outputs.digest }}"
          touch "${{ runner.temp }}/digests/${digest#sha256:}"

      - name: Upload digest
        if: github.event.inputs.dry-run == 'false'
        uses: actions/upload-artifact@v4
        with:
          name: digests-${{ env.PLATFORM_PAIR }}
          path: ${{ runner.temp }}/digests/*
          if-no-files-found: error
          retention-days: 1

  build-artifacts:
    if: github.event.inputs.with-artifacts == 'true'
    name: Build artifacts
    needs: semantic-release-dry
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            name: linux
            architecture: x64
            yarn_setup: yarn config set supportedArchitectures.cpu "x64"
          - os: ubuntu-24.04-arm
            name: linux
            architecture: arm64
            yarn_setup: yarn config set supportedArchitectures.cpu "arm64"
          - os: windows-latest
            name: win
            architecture: x64
            yarn_setup: yarn config set supportedArchitectures.cpu "x64"
          #- os: macos-latest
          #  name: osx
          #  architecture: x64
          #  yarn_setup: yarn config set supportedArchitectures.cpu "x64"
          #- os: macos-latest
          #  name: osx
          #  architecture: arm64
          #  yarn_setup: yarn config set supportedArchitectures.cpu "arm64"
    runs-on: ${{ matrix.os }}
    steps:
      - name: Check out the repo
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          architecture: ${{ matrix.architecture }}

      - name: Setup yarn architecture
        run: ${{ matrix.yarn_setup }}

      - name: Activate corepack
        run: |
          corepack install
          corepack enable

      - name: Patch basePath for standalone release (Linux)
        if: ${{ matrix.name == 'linux' }}
        shell: bash
        run: |
          sed -i "s,basePath: '',basePath: '/__PATH_PREFIX__',g" ./ui/next.config.js

      - name: Patch basePath for standalone release (Windows)
        if: ${{ matrix.name == 'win' }}
        shell: pwsh
        run: |
          (Get-Content ./ui/next.config.js) -replace "basePath: ''", "basePath: '/__PATH_PREFIX__'" | Set-Content ./ui/next.config.js

      - name: Rename env file for production (Linux)
        if: ${{ matrix.name == 'linux' }}
        shell: bash
        run: mv ./ui/.env.docker ./ui/.env.production

      - name: Rename env file for production (Windows)
        if: ${{ matrix.name == 'win' }}
        shell: pwsh
        run: Rename-Item -Path ./ui/.env.docker -NewName .env.production

      - name: Install dependencies
        run: yarn install

      - name: Build
        run: yarn turbo build

      - name: Install production dependencies
        run: yarn workspaces focus --all --production

      - name: Prepare artifact
        if: ${{ matrix.name == 'linux' || matrix.name == 'osx' }}
        shell: bash
        run: |
          chmod +x distribution/prepare_artifact_linux.sh
          ./distribution/prepare_artifact_linux.sh ${{ github.sha }}

      - name: Prepare artifact
        if: ${{ matrix.name == 'win' }}
        shell: pwsh
        run: |
          ./distribution/prepare_artifact_win.ps1 ${{ github.sha }}

      - name: Create zip
        uses: thedoctor0/zip-release@0.7.5
        if: ${{ matrix.name == 'win' }}
        with:
          type: "zip"
          directory: "./_output/"
          path: "."
          filename: "../_artifacts/Maintainerr.${{ needs.semantic-release-dry.outputs.version }}.${{ matrix.name }}-${{ matrix.architecture }}.zip"

      - name: Create tar
        if: ${{ matrix.name == 'osx' || matrix.name == 'linux' }}
        shell: pwsh
        run: |
          cd ./_output/
          tar -zcf ../_artifacts/Maintainerr.${{ needs.semantic-release-dry.outputs.version }}.${{ matrix.name }}-${{ matrix.architecture }}.tar.gz .

      - name: Publish artifact
        uses: actions/upload-artifact@v4
        if: ${{ matrix.name == 'win' }}
        with:
          include-hidden-files: true
          name: release_windows-${{ matrix.architecture }}
          path: ${{ github.workspace }}/_artifacts/

      - name: Publish artifact
        uses: actions/upload-artifact@v4
        if: ${{ matrix.name == 'osx' || matrix.name == 'linux' }}
        with:
          name: release_${{ matrix.name }}-${{ matrix.architecture }}
          path: ${{ github.workspace }}/_artifacts/

  merge:
    name: Merge Docker digests and push
    if: ${{ github.event.inputs.with-docker-images == 'true' && github.event.inputs.dry-run == 'false' }}
    runs-on: ubuntu-latest
    needs: [build-docker-image, semantic-release-dry]
    steps:
      - name: Download digests
        uses: actions/download-artifact@v4
        with:
          path: ${{ runner.temp }}/digests
          pattern: digests-*
          merge-multiple: true

      - name: Log in to GitHub Container registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME  }}
          password: ${{ secrets.DOCKERHUB_TOKEN  }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.DOCKERHUB_SLUG }}
            ${{ env.GHCR_SLUG }}
          tags: |
            type=raw,value=latest
            type=semver,pattern={{version}},value=${{ needs.semantic-release-dry.outputs.version }}
            type=semver,pattern={{major}}.{{minor}},value=${{ needs.semantic-release-dry.outputs.version }}
            type=semver,pattern={{major}},value=${{ needs.semantic-release-dry.outputs.version }}
          labels: org.opencontainers.image.revision=${{ github.sha }}

      - name: Create manifest list and push
        working-directory: ${{ runner.temp }}/digests
        run: |
          docker buildx imagetools create $(jq -cr '.tags | map(select(startswith("${{ env.DOCKERHUB_SLUG }}")) | "--tag " + .) | join(" ")' <<< "$DOCKER_METADATA_OUTPUT_JSON") \
            $(printf '${{ env.DOCKERHUB_SLUG }}@sha256:%s ' *)
          docker buildx imagetools create $(jq -cr '.tags | map(select(startswith("${{ env.GHCR_SLUG }}")) | "--tag " + .) | join(" ")' <<< "$DOCKER_METADATA_OUTPUT_JSON") \
            $(printf '${{ env.GHCR_SLUG }}@sha256:%s ' *)

  semantic-release:
    name: Tag and release latest version
    needs: [semantic-release-dry, build-artifacts, build-docker-image, merge]
    if: ${{ always() && !cancelled() && !contains(needs.*.result, 'failure') && needs.semantic-release-dry.outputs.version != '' }}
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: false

      - uses: actions/download-artifact@v4
        with:
          path: _artifacts
          pattern: release_*
          merge-multiple: true

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Activate corepack
        run: |
          corepack install
          corepack enable

      - name: Install dependencies
        run: yarn --immutable

      - name: Release
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}
        run: |
          if [ "${{ github.event.inputs.dry-run }}" == "true" ]; then
          npx semantic-release --dry-run --repository-url "$(git config --get remote.origin.url)"
          else
          npx semantic-release --repository-url "$(git config --get remote.origin.url)"
          fi

      - name: Mkdocs Deploy
        if: ${{ success() && github.event.inputs.dry-run == 'false' }}
        continue-on-error: true
        uses: peter-evans/repository-dispatch@v3
        with:
          token: ${{ secrets.DOCS_DEPLOY }}
          repository: ydkmlt84/Maintainerr_docs
          event-type: maintainerr-release
          client-payload: |
            {
              "ref": "refs/heads/main",
              "versionInput": "${{ needs.semantic-release-dry.outputs.version }}"
            }
